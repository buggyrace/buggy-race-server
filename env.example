# .env
#
#  Make a copy of this (example) file and rename it to .env if you want these
#  settings to be applied to your local development: Python's dotenv module
#  notices a .env file in the project root and applies it.
#
#  See buggy_race_server/config.py for complete list of config settings: most
#  settings you really shouldn't need to change!
#
#  The app reads config settings from the database as soon as it can: this is
#  to allow as much configuration through the web interface as possible.
#  However...
#
#       ** ENVIRONMENT VARIABLES OVERRIDE CONFIG IN THE DATABASE! **
#
#  Buggy racing config settings declared as environment variables are written
#  into the database as soon as the app starts. That means config settings
#  can be declared either here (in a .env file) or as explicit exported ENV
#  vars (e.g., exported to the launch process, or via the Settings ("Config
#  Vars") on Heroku) — and will ALWAYS have priority, and will cause the
#  value in the database to be overwritten.
#



  #---------------------------------------------------------------------------
  # DATABASE_URL
  #---------------------------------------------------------------------------
  #  You must provide a DATABASE_URL via an env variable (because — unlike the
  #  other settings — the server can't get this from the database). Note that
  #  Heroku will generate this automagically for you.
  # 
  #  SQLite:
  #    SQLalchemy creates migrations that can cause problems in SQLite, but
  #    other than that it's great for quick dev work: BUT DO NOT USE THIS
  #    FOR PRODUCTION!
  #    /tmp won't persist if you're running in Docker.
  #    Did we say don't use SQLite in production?
  #      DATABASE_URL=sqlite:////tmp/dev.db
  #
  #  Postgres:
  #      DATABASE_URL=postgres://username:password@host:port/dbname
  #
  #  mySQL:
  #      DATABASE_URL=mysql+mysqlconnector://username:password@host:port/dbname

DATABASE_URL=sqlite:////tmp/dev.db

#--------------------------------------------------------------
# Docker!
#--------------------------------------------------------------
#
# If you're using Docker, put these in:
# the postgres user is the superuser that's going to create
# the user "buggy" which is then made into the user of the new
# database, which is called buggy_race
#
#
# ------------ this is the name of the postgres superuser,
#              not the user that is going to be running
# POSTGRES_USER=superuser
# POSTGRES_PASSWORD=changeme
#
# POSTGRES_DB=buggy_race
#
#------------- db is the name of the docker container with postgres
# DB_HOST=buggy-race-db
#
# ------------- can change this if you need to
# DB_PORT=5432
#
# ------------- don't change this
# DB_USER=buggy
# DB_PASSWORD=you_can_change_this
# DATABASE_URL=postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$POSTGRES_DB


  #---------------------------------------------------------------------------
  # FLASK_APP
  #---------------------------------------------------------------------------
  #  You must provide a FLASK_APP via an env variable (because — unlike the
  #  other settings — the server can't get this from the database). Note that
  #  if you're using the docker container, this will have been set for you.

FLASK_APP=buggy_race_server/app.py



  #---------------------------------------------------------------------------
  # BUGGY_RACE_SERVER_URL
  #---------------------------------------------------------------------------
  #  This is the URL that generated pages will use for links, so you must set
  #  this in order to be able to connect to the website. You might not need
  #  this if you're confident of the URL your server is listening on — once
  #  you've done your setup, this can happily be stored as a config setting in
  #  the database.

BUGGY_RACE_SERVER_URL=http://dev.buggyrace.net



  #---------------------------------------------------------------------------
  # Environment variables for local development
  #---------------------------------------------------------------------------
  #  Development settings like this will be picked up by the app, but are not
  #  necessarily exposed through the web interface — so set them here if it's
  #  helpful. 
  #

  # log levels are the Python logging levels: one of
  # debug, info, warning, error, critical
  # LOG_LEVEL=warning

  # In production, set to a higher number, like 31556926
SEND_FILE_MAX_AGE_DEFAULT=0

# end-of-file
