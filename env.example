# .env
#
#  Make a copy of this (example) file and rename it to .env if you want these
#  settings to be applied to your local development: Python's dotenv module
#  notices a .env file in the project root and applies it.
#
#  See buggy_race_server/config.py for complete list of config settings: most
#  settings you really shouldn't need to change!
#
#  The app reads config settings from the database as soon as it can: this is
#  to allow as much configuration through the web interface as possible.
#  However...
#
#       ** ENVIRONMENT VARIABLES OVERRIDE CONFIG IN THE DATABASE! **
#
#  Buggy racing config settings declared as environment variables are written
#  into the database as soon as the app starts. That means config settings
#  can be declared either here (in a .env file) or as explicit exported ENV
#  vars (e.g., exported to the launch process, or via the Settings ("Config
#  Vars") on Heroku) — and will ALWAYS have priority, and will cause the
#  value in the database to be overwritten.
#


  #---------------------------------------------------------------------------
  # DATABASE_URL
  #---------------------------------------------------------------------------
  #  You must provide a DATABASE_URL via an env variable (because — unlike the
  #  other settings — the server can't get this from the database). If you're
  #  using Heroku, DATABASE_URL will be generated automagically for you.
  #
  #     -----------------------------------------------------------
  #     If you're using Docker, see the section below this instead.
  #     -----------------------------------------------------------
  #
  #  It's possible that your chosen database connector isn't loaded as a
  #  Python module: you might need to do `pip install` if you get "no such
  #  module" errors. 
  #  See https://docs.sqlalchemy.org/en/20/dialects/ for what's possible
  #  (we haven't explicitly tested MariaDB, Oracle or Microsoft SQL Server).
  #
  #  SQLite:
  #    SQLalchemy creates migrations that can cause problems in SQLite, but
  #    other than that it's great for quick dev work: BUT DO NOT USE THIS
  #    FOR PRODUCTION!
  #    Remember /tmp won't persist if you're running in Docker: if that's
  #    important to you, you can put it in the /published directory, which
  #    will survice restarts.
  #    Did we say don't use SQLite in production?
  #      DATABASE_URL=sqlite:////tmp/dev.db
  #
  #  Postgres:
  #      DATABASE_URL=postgres://username:password@host:port/dbname
  #
  #  mySQL:
  #      DATABASE_URL=mysql+mysqlconnector://username:password@host:port/dbname
  #      or
  #      DATABASE_URL=mysql+pymysql://username:password@host:port/dbname
  #
  #  mariaSQL
  #      DATABASE_URL=mariadb+pymysql://username:password@host:port/dbname
  #
  #  Oracle
  #      DATABASE_URL=oracle+oracledb://username:password@host:port/dbname
  #
  #  Microsoft SQL Server
  #      DATABASE_URL=mssql+pymssql://username:password@freetds_name/?charset=utf8
  #
  #  Note:
  #  If your database connection fails because of authentication problems,
  #  setting IS_REWRITING_DB_URI_PW_AS_QUERY or FORCED_DB_URI_SSL_MODE
  #  may help — they affect the way credentials are offered to the database.
  #

# DATABASE_URL=sqlite:////tmp/dev.db

  #--------------------------------------------------------------
  # Docker
  #--------------------------------------------------------------
  #
  #  If you're using Docker, uncomment and set all the following
  #  items. In summary:
  #    the postgres user is the superuser that's going to create
  #    the user "buggy" which is then made into the user of the new
  #    database, which is called buggy_race.
  #
  #
  # ------------ This is the name of the postgres superuser, and not the user
  #              that is going to be delegated to as the owner of the database
# POSTGRES_USER=superuser
# POSTGRES_PASSWORD=changeme
  #
  # ------------ The name of the database
# POSTGRES_DB=buggy_race
  #
  #------------- This is the name of the docker container running PostgreSQL
# DB_HOST=buggy-race-db
  #
  # ------------- The port the PostgreSQL service will be listening on
# DB_PORT=5432
  #
  # ------------- Don't change the database user (the superuser creates this)
# DB_USER=buggy
# DB_PASSWORD=you_can_change_this
  #
  # ------------- Finally the DATABASE_URL is a compound of the above
# DATABASE_URL=postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$POSTGRES_DB


  #---------------------------------------------------------------------------
  # FLASK_APP
  #---------------------------------------------------------------------------
  #  You must provide a FLASK_APP via an env variable (because — unlike the
  #  other settings — the server can't get this from the database).
FLASK_APP=buggy_race_server/app.py



  #---------------------------------------------------------------------------
  # BUGGY_RACE_SERVER_URL
  #---------------------------------------------------------------------------
  #  This is the URL that generated pages will use for links, so you must set
  #  this in order to be able to connect to your website. You might not need
  #  this in .env if you know the URL the server is listening on — if you can
  #  connect to the webserver during the setup phase (because you know its IP
  #  address or some backstage URL), this can happily be added as a config
  #  setting in the database like all the other config settings.

# BUGGY_RACE_SERVER_URL=http://example.buggyrace.net



  #---------------------------------------------------------------------------
  # Environment variables for local development
  #---------------------------------------------------------------------------
  #  Development settings like this will be picked up by the app, but are not
  #  necessarily exposed through the web interface — so set them here if it's
  #  helpful. 
  #

  #  Log levels are the Python logging levels: one of
  #      debug, info, warning, error, critical
# LOG_LEVEL=warning

  #  In production, set to a higher number, like 31556926
SEND_FILE_MAX_AGE_DEFAULT=0

# end-of-file
